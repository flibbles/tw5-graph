title: Live Graph Template

<$doc.implementation />

Live graphs are designed to rapidly change to show differing sets of nodes and connections. It shows not only whatever node is specified in its node filter, but any immediate [[Neighbors]].

! Creating on-the-fly graph for every tiddler


When you're rendering live graphs through transclusion or the <<.wlink Graph.ViewWidget>> widget, you can specify its nodes filter to vary depending on an outside variable.

This is an //exceptionally powerful trick// which allows you to use the same GraphTiddler to specify the properties for countless live graphs showing different nodes.

For example. If you want to have a ViewTemplate which provides a graph for every open tiddler, this is the best way to do it.

# You create a GraphTiddler configured to use the live template; let's call it <<.tid $:/graph/viewTemplate>>.
# You specify the properties you want in it.
# You specify its node filter to be `[<currentNode>]`
# Then in your ViewTemplate, you invoke that GraphTiddler with something like the following:<$codeblock code="""<$let currentNode=<<currentTiddler>> >
  <$graph.view $tiddler="$:/graph/viewTemplate" />
</$let>""" />

Now you get the benefit of having a custom on-the-fly graph for every open tiddler, but you can also tweak the properties and style of these graphs using <<.graph>>'s user-friendly property editor GUI simply by tweaking the <<.tid $:/graph/viewTemplate>> graph in the settings.

This strategy is discussed more fully in [[the corresponding FAQ|How do I make every open tiddler show a graph of its connections]].

! TiddlyMap's "Live view"

This template can recreate the "Live View" used in TiddlyMap, which is a [[Sidebar]] graph that shows whatever tiddler happens to be "live" at the moment (i.e. top of the displayed story river). TiddlyMap had this by default, while in <<.graph>>, you to set one up, but it isn't hard. Here are the steps

# Install the [[Focused Tiddler]] plugin (or the [[HotZone]] plugin, although that plugin is older and unmaintained).
#* This is a step that even TiddlyMap required you to do.
# Install the [[TopStoryView]] plugin.
#* Not technically required, but it makes it possible to scroll your river low enough that even your bottom-most tiddler can be focused.
#* If you choose to use this, make sure to switch to use "top" view in [[$:/ControlPanel]]->Appearance->Story View.
# Install the Live View that's part of this documentation.


''In other words,'' drag these three buttons onto your project and click "import" when prompted.

@@text-align:center;
<$link to="$:/plugins/Gk0Wk/focused-tiddler" class="graph-dragger graph-dragger-plugin">{{$:/core/images/plugin-generic-plugin|4em}}<br>Focused-Tiddler</$link>
<$link to="$:/plugins/felixhayashi/topstoryview" class="graph-dragger graph-dragger-plugin">{{$:/core/images/plugin-generic-plugin|4em}}<br>Top Story View</$link>

<$link to="$:/graph/Live View" class="graph-dragger graph-dragger-view">Live View</$link>
@@

The Live View tiddler contains all the configurations to act similarly to the TiddlyMap live view, including box nodes, proper node spacing, and focusing on <<.tid $:/temp/focussedTiddler>>

That's all. When the live view is display, it will rerender itself dynamically to display the tiddler and neighbors of whatever tiddler you've currently got live on your story river.

Unlike TiddlyMap, you can create as many "Live views", and they're much more customizable.
