\widget $nodes.neighbors($filter, $fields:'[all[]]', $functions:'[all[]]', $interedges, $whitelist:'[!is[system]]')

<!-- None of these \procedures are \functions because that mucks with caching. -->
\procedure filter.cached() [{!!title}] :cache[all[tiddlers]subfilter<$filter>]

<!-- Holy nuts this is getting complicated, but we need to :map:flat twice
     in order to switch ..currentTiddler and currentTiddler, as the fields
     and functions will expect it. -->
\procedure edges.fields.flipped() [<..currentTiddler>] :map:flat[<currentTiddler>gettyped<..currentTiddler>]
\procedure edges.functions.flipped() [<..currentTiddler>] :map:flat[<currentTiddler>subfilter<..currentTiddler>]

\procedure edges.fields() :cache[subfilter{$:/plugins/flibbles/graph/subfilters##edgetypes.fields}subfilter<$fields>] :map:flat[<..currentTiddler>subfilter<edges.fields.flipped>]
\procedure edges.functions() :cache[subfilter{$:/plugins/flibbles/graph/subfilters##edgetypes.functions}subfilter<$functions>addprefix[$:/config/flibbles/graph/edges/functions/]get[filter]] :map:flat[<..currentTiddler>subfilter<edges.functions.flipped>]

\procedure neighbors.for() [subfilter<edges.fields>] [subfilter<edges.functions>] +[!is[blank]unique[]]
\procedure neighbors.cached() [all[]] :cache[subfilter<neighbors.for>]

\procedure incoming.raw() [all[tiddlers]subfilter<$whitelist>!search:title:regexp,casesensitive<regexp>] :filter[subfilter<neighbors.cached>search:title:regexp,casesensitive<regexp>]
\procedure incoming.cached() :cache[subfilter<incoming.raw>]
\whitespace trim

<$vars
	regexp={{{ [subfilter<filter.cached>escaperegexp[]join[|]addprefix[^(?:]addsuffix[)$]] }}}
	functionsFilter=<<$functions>>
	fieldsFilter=<<$fields>> >

<!-- incoming neighbors -->

<$list filter=<<incoming.cached>> >

<$slot $name=ts-raw>

<$node.default />

</$slot>

<$edges.typed>

<%if [<$interedges>match[yes]] ~[<toTiddler>search:title:regexp,casesensitive<regexp>] %>

<$edge $id=<<id>> />

<%endif%></$edges.typed></$list>

<!-- outgoing neighbors -->

<$list filter="[subfilter<filter.cached>subfilter<neighbors.cached>subfilter<$whitelist>!search:title:regexp,casesensitive<regexp>] -[subfilter<incoming.cached>]">

<$slot $name=ts-raw>

<$node.default />

</$slot>

<%if [<$interedges>match[yes]] %>

<$edges.typed />

<%endif%></$list>
\end

\relink $nodes.neighbors $filter:filter $fields:filter $functions:filter $whitelist:filter
