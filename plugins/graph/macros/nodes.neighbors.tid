\widget $nodes.neighbors($filter, $fields:'[all[]]', $formulas:'[all[]]', $interedges:no, $whitelist:'[!is[system]]')

<!-- None of these \procedures are \functions because that mucks with caching. -->
\procedure filter.cached() [{!!title}] :cache[all[tiddlers]subfilter<$filter>]
\procedure configs.all() :cache[all[shadows+tiddlers]removeprefix[$:/config/flibbles/graph/edges/]]
\procedure configs.fields() :cache[subfilter<configs.all>removeprefix[fields/]subfilter<$fields>]
\procedure configs.formulas() :cache[subfilter<configs.all>removeprefix[formulas/]subfilter<$formulas>addprefix[$:/config/flibbles/graph/edges/formulas/]]

<!-- Holy nuts this is getting complicated, but we need to :map:flat twice
     in order to switch ..currentTiddler and currentTiddler, as the fields
     and formulas will expect it. -->
\procedure edges.fields.flipped() [<..currentTiddler>] :map:flat[<currentTiddler>gettyped<..currentTiddler>]
\procedure edges.formulas.flipped() [<..currentTiddler>] :map:flat[<currentTiddler>subfilter<..currentTiddler>]

\procedure edges.fields() [subfilter<configs.fields>] :map:flat[<..currentTiddler>subfilter<edges.fields.flipped>]
\procedure edges.formulas() [subfilter<configs.formulas>get[filter]] :map:flat[<..currentTiddler>subfilter<edges.formulas.flipped>]

\procedure neighbors.for() [subfilter<edges.fields>] [subfilter<edges.formulas>] +[!is[blank]unique[]]
\procedure neighbors.cached() [all[]] :cache[subfilter<neighbors.for>]

\procedure incoming.raw() [all[tiddlers]subfilter<$whitelist>!search:title:regexp,casesensitive<regexp>] :filter[subfilter<neighbors.cached>search:title:regexp,casesensitive<regexp>]
\procedure incoming.cached() :cache[subfilter<incoming.raw>]
\whitespace trim

<$vars regexp={{{ [subfilter<filter.cached>escaperegexp[]join[|]addprefix[^(?:]addsuffix[)$]] }}}>

<!-- incoming neighbors -->

<$list filter=<<incoming.cached>> >

<$slot $name=ts-raw>

<$node.default />

</$slot>

<$edges.typed $formulas=<<$formulas>> $fields=<<$fields>> >

<%if [<$interedges>!match[no]] ~[<toTiddler>search:title:regexp,casesensitive<regexp>] %>

<$edge $id=<<id>> />

<%endif%></$edges.typed></$list>

<!-- outgoing neighbors -->

<$list filter="[subfilter<filter.cached>subfilter<neighbors.cached>subfilter<$whitelist>!search:title:regexp,casesensitive<regexp>] -[subfilter<incoming.cached>]">

<$slot $name=ts-raw>

<$node.default />

</$slot>

<%if [<$interedges>!match[no]] %>

<$edges.typed $formulas=<<$formulas>> $fields=<<$fields>> />

<%endif%></$list>
\end

\relink $nodes.neighbors $filter:filter
