title: $:/plugins/flibbles/graph/ui/Wizard

\define state() $:/temp/graph/wizard
\whitespace trim

<$let
	defaultEngine={{{ [[$:/config/flibbles/graph/engine]get[text]] ~[[graphengine]modules[]moduleproperty[name]first[]] }}}
	chosenEngine={{{ [<state>get[engine]] ~[<defaultEngine>] }}}
>

<<chosenEngine>>

<$codeblock code={{{ [<state>get[text]] }}} />

<%if [[graphengine]modules[]count[]] %>

<$list filter="[[graphengine]modules[]moduleproperty[name]]">
<br>
<$radio
	tiddler=<<state>>
	field=engine
	default=<<defaultEngine>>
	value={{!!title}}>
&#32;<$text text={{!!title}} />
</$radio>

</$list>

<%endif%>

<$vars
	jsonOptions={{{ [[graphengine]modules[]moduleproperty[properties]] }}}
>

<$set name=properties filter="[<jsonOptions>jsonindexes[]]">

<<properties>>

<$let
	nodesState=`$(state)$/nodes`
	edgesState=`$(state)$/edges`
>
<$graph>
<$genesis $type=$style $$for=nodes
	$names="[<nodesState>indexes[]]"
	$values="[<nodesState>indexes[]] :map[<nodesState>getindex<currentTiddler>]">
	<$node $tiddler=Root />
	<$node $tiddler=Branch />
	<$node $tiddler=Leaf1 />
	<$node $tiddler=Leaf2 />
	<$node $tiddler=Leaf3 />
	<$node $tiddler=Leaf4 />
</$genesis>
<$genesis $type=$style $$for=edges
	$names="[<edgesState>indexes[]]"
	$values="[<edgesState>indexes[]] :map[<edgesState>getindex<currentTiddler>]">
	<$edge from=Root to=Branch />
	<$edge from=Root to=Leaf1 />
	<$edge from=Root to=Leaf2 />
	<$edge from=Branch to=Leaf3 />
	<$edge from=Branch to=Leaf4 />
</$genesis>
</$graph>

<$macrocall $name=tabs
	tabsList="[<jsonOptions>jsonindexes[]]"
	default=nodes
	state=<<state>>
	template="$:/plugins/flibbles/graph/ui/Wizard/Table"
/>
